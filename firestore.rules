rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si el usuario es miembro de una organización
    function isMemberOfOrganization(orgId) {
      return exists(/databases/$(database)/documents/organizationMembers/$(request.auth.uid)_$(orgId));
    }
    
    // Función para verificar si el usuario es administrador de una organización
    function isAdminOfOrganization(orgId) {
      let membership = get(/databases/$(database)/documents/organizationMembers/$(request.auth.uid)_$(orgId));
      return membership != null && membership.data.role == 'admin';
    }
    
    // Función para verificar si el usuario es editor de una organización
    function isEditorOfOrganization(orgId) {
      let membership = get(/databases/$(database)/documents/organizationMembers/$(request.auth.uid)_$(orgId));
      return membership != null && (membership.data.role == 'admin' || membership.data.role == 'editor');
    }
    
    // Función para verificar si un documento pertenece a una organización específica
    function documentBelongsToOrg(docId, orgId) {
      let doc = get(/databases/$(database)/documents/documents/$(docId));
      return doc != null && doc.data.organizationId == orgId;
    }

    // Usuarios
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Organizaciones
    match /organizations/{orgId} {
      allow read: if request.auth != null && isMemberOfOrganization(orgId);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && isAdminOfOrganization(orgId);
    }

    // Miembros de organización
    match /organizationMembers/{membershipId} {
      allow read: if request.auth != null && (
        membershipId.matches(request.auth.uid + ".*") || 
        isMemberOfOrganization(membershipId.split('_')[1])
      );
      allow create, update, delete: if request.auth != null && (
        isAdminOfOrganization(membershipId.split('_')[1]) || 
        (request.resource.data.role != 'admin' && isAdminOfOrganization(membershipId.split('_')[1]))
      );
    }

    // Documentos
    match /documents/{docId} {
      allow read: if request.auth != null && isMemberOfOrganization(resource.data.organizationId);
      allow create: if request.auth != null && isEditorOfOrganization(request.resource.data.organizationId);
      allow update, delete: if request.auth != null && isEditorOfOrganization(resource.data.organizationId);
    }

    // Invitaciones
    match /invitations/{invitationId} {
      allow read: if request.auth != null && (
        resource.data.email == request.auth.token.email ||
        isMemberOfOrganization(resource.data.organizationId)
      );
      allow create: if request.auth != null && isAdminOfOrganization(request.resource.data.organizationId);
      allow update, delete: if request.auth != null && (
        resource.data.email == request.auth.token.email ||
        isAdminOfOrganization(resource.data.organizationId)
      );
    }
    
    // Presencia de usuarios - colaboración en tiempo real
    match /presence/{presenceId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
        presenceId.startsWith(request.resource.data.documentId + '_') &&
        request.resource.data.userId == request.auth.uid &&
        documentBelongsToOrg(request.resource.data.documentId, request.resource.data.organizationId) &&
        isMemberOfOrganization(request.resource.data.organizationId);
      allow delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         isAdminOfOrganization(resource.data.organizationId));
    }
    
    // Bloqueos de documentos
    match /documentLocks/{docId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        documentBelongsToOrg(docId, request.resource.data.organizationId) &&
        isEditorOfOrganization(request.resource.data.organizationId);
      allow delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         isAdminOfOrganization(resource.data.organizationId));
    }
  }
}
